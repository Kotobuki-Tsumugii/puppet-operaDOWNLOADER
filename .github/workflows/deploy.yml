name: Build and Deploy Download Page

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment: github-pages

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install --no-package-lock

    - name: Debug and test API access
      env:
        PRIVATE_REPO_OWNER: ${{ vars.PRIVATE_REPO_OWNER || 'Kotobuki-Tsumugii' }}
        PRIVATE_REPO_NAME: ${{ vars.PRIVATE_REPO_NAME || 'puppet-opera' }}
        GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        echo "=== 详细调试信息 ==="
        echo "仓库: $PRIVATE_REPO_OWNER/$PRIVATE_REPO_NAME"
        if [ -z "${GH_TOKEN:-}" ]; then
          echo "❌ GH token 为空（请在仓库 Secrets 中添加 PRIVATE_REPO_TOKEN，或使用 GITHUB_TOKEN）"
        else
          echo "Token 前8位: ${GH_TOKEN:0:8}..."
        fi

        # 安装 jq（确保可用）
        if ! command -v jq >/dev/null 2>&1; then
          echo "安装 jq ..."
          sudo apt-get update -y
          sudo apt-get install -y jq
        fi

        echo "测试基础认证..."
        curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/user | jq '.login' || echo "无法获取用户信息"

        echo "测试仓库访问权限..."
        http_code=$(curl -s -o /tmp/repo_body -w "%{http_code}" -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$PRIVATE_REPO_OWNER/$PRIVATE_REPO_NAME")
        echo "仓库API状态码: $http_code"
        if [ "$http_code" -eq 200 ]; then
          echo "✅ 仓库访问成功"
          cat /tmp/repo_body | jq '{name: .name, private: .private, permissions: .permissions}'
        else
          echo "❌ 仓库访问失败，返回："
          cat /tmp/repo_body
        fi

        echo "测试 releases 访问..."
        http_code=$(curl -s -o /tmp/releases_body -w "%{http_code}" -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$PRIVATE_REPO_OWNER/$PRIVATE_REPO_NAME/releases")
        echo "Releases API状态码: $http_code"
        if [ "$http_code" -eq 200 ]; then
          count=$(jq length /tmp/releases_body)
          echo "Found $count releases"
        else
          echo "无法访问 releases，返回："
          cat /tmp/releases_body
        fi

    - name: Build download page
      env:
        PRIVATE_REPO_OWNER: ${{ vars.PRIVATE_REPO_OWNER || 'Kotobuki-Tsumugii' }}
        PRIVATE_REPO_NAME: ${{ vars.PRIVATE_REPO_NAME || 'puppet-opera' }}
        GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        node build.js

    - name: Inspect dist
      run: |
        if [ -d dist ]; then
          echo "dist 内容:"
          ls -la dist
        else
          echo "❌ dist 目录不存在 —— build.js 可能没有生成静态文件"
          exit 1
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'dist'

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: github-pages

    steps:
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4